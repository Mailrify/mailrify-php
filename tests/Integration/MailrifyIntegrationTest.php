<?php

declare(strict_types=1);

namespace Mailrify\Sdk\Tests\Integration;

use Mailrify\Sdk\Client;
use PHPUnit\Framework\TestCase;

final class MailrifyIntegrationTest extends TestCase
{
    private Client $client;

    protected function setUp(): void
    {
        parent::setUp();

        $apiKeyEnv = getenv('MAILRIFY_API_KEY');
        if (!is_string($apiKeyEnv) || $apiKeyEnv === '') {
            $this->markTestSkipped('MAILRIFY_API_KEY not configured. Skipping integration tests.');
        }

        $baseUrlEnv = getenv('MAILRIFY_BASE_URL');
        $apiKey = trim($apiKeyEnv);
        $baseUrl = is_string($baseUrlEnv) && $baseUrlEnv !== '' ? trim($baseUrlEnv) : 'https://app.mailrify.com/api';

        $this->client = Client::create([
            'apiKey' => $apiKey,
            'baseUrl' => $baseUrl,
        ]);
    }

    public function testListDomainsReturnsArray(): void
    {
        $domains = $this->client->domains()->listAll();

        self::assertGreaterThanOrEqual(0, count($domains));
    }

    public function testSendEmailLifecycle(): void
    {
        $fromEnv = getenv('MAILRIFY_INTEGRATION_FROM');
        $toEnv = getenv('MAILRIFY_INTEGRATION_TO');

        if (!is_string($fromEnv) || trim($fromEnv) === '' || !is_string($toEnv) || trim($toEnv) === '') {
            $this->markTestSkipped('MAILRIFY_INTEGRATION_FROM and MAILRIFY_INTEGRATION_TO must be set to run email integration tests.');
        }

        $from = trim($fromEnv);
        $recipients = array_values(array_filter(array_map('trim', explode(',', $toEnv)), static fn (string $value): bool => $value !== ''));
        if ($recipients === []) {
            $this->fail('MAILRIFY_INTEGRATION_TO must contain at least one valid email address.');
        }
        $subject = 'Mailrify SDK integration ' . uniqid('', true);

        $to = count($recipients) === 1 ? $recipients[0] : $recipients;

        $sendResponse = $this->client->emails()->send([
            'from' => $from,
            'to' => $to,
            'subject' => $subject,
            'text' => 'Integration test email generated by Mailrify PHP SDK.',
            'html' => '<p>Integration test email generated by <strong>Mailrify PHP SDK</strong>.</p>',
        ]);

        self::assertNotEmpty($sendResponse->emailId);

        // Allow for eventual consistency before fetching the email details.
        usleep(500_000);

        $email = $this->client->emails()->get($sendResponse->emailId);
        self::assertSame($sendResponse->emailId, $email->id);
        self::assertSame($subject, $email->subject);

        $listResponse = $this->client->emails()->listAll(['limit' => 10]);
        self::assertGreaterThanOrEqual(0, $listResponse->count);
    }
}
